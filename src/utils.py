from math import sin, cos, pi
from panda3d.core import (
    GeomVertexFormat, GeomVertexData, Geom, GeomTriangles, GeomNode,
    GeomVertexWriter, Vec3, Vec4, Mat4, NodePath, TransparencyAttrib
)

from rdkit import Chem
from rdkit.Chem import AllChem



# * 3d functions

def make_sphere(render, radius=1.0, color=(1, 0, 0, 1), slices=32, stacks=16):
    # Generated by ChatGPT 5.0

    """
    Procedurally create a colored sphere.

    Args:
        render (NodePath): The parent node (usually base.render).
        radius (float): Radius of the sphere.
        color (tuple): RGBA color, each value between 0–1.
        slices (int): Number of horizontal divisions.
        stacks (int): Number of vertical divisions.

    Returns:
        NodePath: The sphere node.
    """

    format = GeomVertexFormat.get_v3n3c4()
    vdata = GeomVertexData('sphere', format, Geom.UH_static)

    vertex = GeomVertexWriter(vdata, 'vertex')
    normal = GeomVertexWriter(vdata, 'normal')
    color_writer = GeomVertexWriter(vdata, 'color')

    # Generate vertices
    for i in range(stacks + 1):
        phi = pi * i / stacks
        for j in range(slices + 1):
            theta = 2 * pi * j / slices
            x = radius * sin(phi) * cos(theta)
            y = radius * sin(phi) * sin(theta)
            z = radius * cos(phi)
            vertex.add_data3(x, y, z)
            normal.add_data3(Vec3(x, y, z).normalized())
            color_writer.add_data4f(*color)

    # Generate triangles
    tris = GeomTriangles(Geom.UH_static)
    for i in range(stacks):
        for j in range(slices):
            i1 = i * (slices + 1) + j
            i2 = i1 + slices + 1
            tris.add_vertices(i1, i2, i1 + 1)
            tris.add_vertices(i1 + 1, i2, i2 + 1)

    geom = Geom(vdata)
    geom.add_primitive(tris)
    node = GeomNode('sphere')
    node.add_geom(geom)

    sphere_np = render.attach_new_node(node)
    sphere_np.set_two_sided(True)

    # Enable transparency if alpha < 1.0
    if color[3] < 1.0:
        sphere_np.set_transparency(TransparencyAttrib.M_alpha)
        sphere_np.set_depth_write(False)  # Helps avoid z-sorting artifacts

    return sphere_np

def make_cylinder(render, start, end, radius=1.0, color=(1, 0, 0, 1), slices=32):
    # Generated using ChatGPT 5.0

    """
    Procedurally create a cylinder between two 3D points.

    Args:
        render (NodePath): Parent node (usually base.render).
        start (Vec3 or tuple): Starting position (bottom center).
        end (Vec3 or tuple): Ending position (top center).
        radius (float): Cylinder radius.
        color (tuple): RGBA color (0–1 range).
        slices (int): Number of radial divisions.

    Returns:
        NodePath: The oriented cylinder NodePath.
    """
    # Convert to Vec3
    start = Vec3(*start)
    end = Vec3(*end)
    axis = end - start
    height = axis.length()
    if height == 0:
        raise ValueError("Start and end points must be different")

    # Create geometry
    format = GeomVertexFormat.get_v3n3c4()
    vdata = GeomVertexData('cylinder', format, Geom.UH_static)
    vertex = GeomVertexWriter(vdata, 'vertex')
    normal = GeomVertexWriter(vdata, 'normal')
    color_writer = GeomVertexWriter(vdata, 'color')

    # Build cylinder along the Z-axis first (we’ll orient later)
    for i in range(slices + 1):
        theta = 2 * pi * i / slices
        x = radius * cos(theta)
        y = radius * sin(theta)
        nx, ny = cos(theta), sin(theta)

        # Bottom and top vertices
        vertex.add_data3(x, y, 0)
        normal.add_data3(nx, ny, 0)
        color_writer.add_data4f(*color)

        vertex.add_data3(x, y, height)
        normal.add_data3(nx, ny, 0)
        color_writer.add_data4f(*color)

    tris = GeomTriangles(Geom.UH_static)

    # Side triangles
    for i in range(slices):
        i1 = i * 2
        i2 = i1 + 1
        i3 = (i1 + 2) % ((slices + 1) * 2)
        i4 = (i1 + 3) % ((slices + 1) * 2)
        tris.add_vertices(i1, i3, i2)
        tris.add_vertices(i2, i3, i4)

    # Caps
    for z, nz in [(0, -1), (height, 1)]:
        center_index = vdata.get_num_rows()
        vertex.add_data3(0, 0, z)
        normal.add_data3(0, 0, nz)
        color_writer.add_data4f(*color)

        base_index = 0 if nz < 0 else 1
        for i in range(slices):
            i1 = i * 2 + base_index
            i2 = ((i + 1) % slices) * 2 + base_index
            if nz > 0:
                tris.add_vertices(center_index, i1, i2)
            else:
                tris.add_vertices(center_index, i2, i1)

    geom = Geom(vdata)
    geom.add_primitive(tris)
    node = GeomNode('cylinder')
    node.add_geom(geom)

    cylinder_np = NodePath(node)
    cylinder_np.set_two_sided(True)

    # Transparency if needed
    if color[3] < 1.0:
        cylinder_np.set_transparency(TransparencyAttrib.M_alpha)
        cylinder_np.set_depth_write(False)

    # --- Orient cylinder between start and end ---
    z_axis = Vec3(0, 0, 1)
    axis.normalize()
    cross = z_axis.cross(axis)
    angle = z_axis.signed_angle_deg(axis, cross if cross.length() > 0 else Vec3(1, 0, 0))

    # Rotation matrix aligning Z-axis to the target axis
    mat = Mat4.rotate_mat(angle, cross)
    cylinder_np.set_mat(mat)

    # Position it so base sits at `start`
    cylinder_np.set_pos(start)

    # Reparent to render
    cylinder_np.reparent_to(render)

    return cylinder_np


def update_shape_color(shape, color):
    """
    Update the color of a certain shape. Can handle transparency.
    """

    shape.set_color(color)

    # Enable transparency if alpha < 1.0
    if color[3] < 1.0:
        shape.set_transparency(TransparencyAttrib.M_alpha)
        shape.set_depth_write(False) # Helps avoid z-sorting artifacts



# * Chem function

COVALENT_RADII = {
    "H": 0.31, "He": 0.28,
    "Li": 1.28, "Be": 0.96, "B": 0.84, "C": 0.76, "N": 0.71, "O": 0.66, "F": 0.57, "Ne": 0.58,
    "Na": 1.66, "Mg": 1.41, "Al": 1.21, "Si": 1.11, "P": 1.07, "S": 1.05, "Cl": 1.02, "Ar": 1.06,
    "K": 2.03, "Ca": 1.76, "Sc": 1.70, "Ti": 1.60, "V": 1.53, "Cr": 1.39, "Mn": 1.39, "Fe": 1.32,
    "Co": 1.26, "Ni": 1.24, "Cu": 1.32, "Zn": 1.22, "Ga": 1.22, "Ge": 1.20, "As": 1.19, "Se": 1.20,
    "Br": 1.20, "Kr": 1.16,
    "Rb": 2.20, "Sr": 1.95, "Y": 1.90, "Zr": 1.75, "Nb": 1.64, "Mo": 1.54, "Tc": 1.47, "Ru": 1.46,
    "Rh": 1.42, "Pd": 1.39, "Ag": 1.45, "Cd": 1.44, "In": 1.42, "Sn": 1.39, "Sb": 1.39, "Te": 1.38,
    "I": 1.39, "Xe": 1.40,
    "Cs": 2.44, "Ba": 2.15, "La": 2.07, "Ce": 2.04, "Pr": 2.03, "Nd": 2.01, "Pm": 1.99, "Sm": 1.98,
    "Eu": 1.98, "Gd": 1.96, "Tb": 1.94, "Dy": 1.92, "Ho": 1.92, "Er": 1.89, "Tm": 1.90, "Yb": 1.87,
    "Lu": 1.87, "Hf": 1.75, "Ta": 1.70, "W": 1.62, "Re": 1.51, "Os": 1.44, "Ir": 1.41, "Pt": 1.36,
    "Au": 1.36, "Hg": 1.32, "Tl": 1.45, "Pb": 1.46, "Bi": 1.48, "Po": 1.40, "At": 1.50, "Rn": 1.50,
    "Fr": 2.60, "Ra": 2.21, "Ac": 2.15, "Th": 2.06, "Pa": 2.00, "U": 1.96, "Np": 1.90, "Pu": 1.87,
    "Am": 1.80, "Cm": 1.69, "Bk": 1.60, "Cf": 1.60, "Es": 1.60, "Fm": 1.60, "Md": 1.60, "No": 1.60,
    "Lr": 1.60, "Rf": 1.60, "Db": 1.60, "Sg": 1.60, "Bh": 1.60, "Hs": 1.60, "Mt": 1.60, "Ds": 1.60,
    "Rg": 1.60, "Cn": 1.60, "Nh": 1.60, "Fl": 1.60, "Mc": 1.60, "Lv": 1.60, "Ts": 1.60, "Og": 1.60
}

CPK_COLORS = {
    "H": (1.0, 1.0, 1.0, 1.0), "He": (0.85, 1.0, 1.0, 1.0),
    "Li": (0.8, 0.5, 1.0, 1.0), "Be": (0.76, 1.0, 0.0, 1.0),
    "B": (1.0, 0.71, 0.71, 1.0), "C": (0.56, 0.56, 0.56, 1.0),
    "N": (0.19, 0.31, 0.97, 1.0), "O": (1.0, 0.05, 0.05, 1.0),
    "F": (0.56, 0.88, 0.31, 1.0), "Ne": (0.70, 0.89, 0.96, 1.0),
    "Na": (0.67, 0.36, 0.95, 1.0), "Mg": (0.54, 1.0, 0.0, 1.0),
    "Al": (0.75, 0.65, 0.65, 1.0), "Si": (0.94, 0.78, 0.63, 1.0),
    "P": (1.0, 0.50, 0.0, 1.0), "S": (1.0, 1.0, 0.19, 1.0),
    "Cl": (0.12, 0.94, 0.12, 1.0), "Ar": (0.50, 0.82, 0.89, 1.0),
    "K": (0.56, 0.25, 0.83, 1.0), "Ca": (0.24, 1.0, 0.0, 1.0),
    "Sc": (0.90, 0.90, 0.90, 1.0), "Ti": (0.75, 0.76, 0.78, 1.0),
    "V": (0.65, 0.65, 0.67, 1.0), "Cr": (0.54, 0.60, 0.78, 1.0),
    "Mn": (0.61, 0.48, 0.78, 1.0), "Fe": (0.88, 0.40, 0.20, 1.0),
    "Co": (0.94, 0.56, 0.63, 1.0), "Ni": (0.31, 0.82, 0.31, 1.0),
    "Cu": (0.78, 0.50, 0.20, 1.0), "Zn": (0.49, 0.50, 0.69, 1.0),
    "Ga": (0.76, 0.56, 0.56, 1.0), "Ge": (0.40, 0.56, 0.56, 1.0),
    "As": (0.74, 0.50, 0.89, 1.0), "Se": (1.0, 0.63, 0.0, 1.0),
    "Br": (0.65, 0.16, 0.16, 1.0), "Kr": (0.36, 0.72, 0.82, 1.0),
    "Rb": (0.44, 0.18, 0.69, 1.0), "Sr": (0.0, 1.0, 0.0, 1.0),
    "Y": (0.58, 1.0, 1.0, 1.0), "Zr": (0.58, 0.88, 0.88, 1.0),
    "Nb": (0.45, 0.76, 0.79, 1.0), "Mo": (0.33, 0.71, 0.71, 1.0),
    "Tc": (0.23, 0.62, 0.62, 1.0), "Ru": (0.14, 0.56, 0.56, 1.0),
    "Rh": (0.04, 0.49, 0.55, 1.0), "Pd": (0.0, 0.41, 0.52, 1.0),
    "Ag": (0.75, 0.75, 0.75, 1.0), "Cd": (1.0, 0.85, 0.56, 1.0),
    "In": (0.65, 0.46, 0.45, 1.0), "Sn": (0.40, 0.50, 0.50, 1.0),
    "Sb": (0.62, 0.39, 0.71, 1.0), "Te": (0.83, 0.48, 0.0, 1.0),
    "I": (0.58, 0.0, 0.58, 1.0), "Xe": (0.26, 0.62, 0.69, 1.0),
    "Cs": (0.34, 0.09, 0.56, 1.0), "Ba": (0.0, 0.79, 0.0, 1.0),
    "La": (0.44, 0.83, 1.0, 1.0), "Ce": (1.0, 1.0, 0.78, 1.0),
    "Pr": (0.85, 1.0, 0.78, 1.0), "Nd": (0.78, 1.0, 0.78, 1.0),
    "Pm": (0.64, 1.0, 0.78, 1.0), "Sm": (0.56, 1.0, 0.78, 1.0),
    "Eu": (0.38, 1.0, 0.78, 1.0), "Gd": (0.27, 1.0, 0.78, 1.0),
    "Tb": (0.19, 1.0, 0.78, 1.0), "Dy": (0.12, 1.0, 0.78, 1.0),
    "Ho": (0.0, 1.0, 0.61, 1.0), "Er": (0.0, 0.90, 0.46, 1.0),
    "Tm": (0.0, 0.83, 0.32, 1.0), "Yb": (0.0, 0.75, 0.22, 1.0),
    "Lu": (0.0, 0.67, 0.14, 1.0),
    "Hf": (0.30, 0.76, 1.0, 1.0), "Ta": (0.30, 0.65, 1.0, 1.0),
    "W": (0.13, 0.58, 0.84, 1.0), "Re": (0.15, 0.49, 0.67, 1.0),
    "Os": (0.15, 0.40, 0.59, 1.0), "Ir": (0.09, 0.33, 0.53, 1.0),
    "Pt": (0.82, 0.82, 0.88, 1.0), "Au": (1.0, 0.82, 0.14, 1.0),
    "Hg": (0.72, 0.72, 0.82, 1.0), "Tl": (0.65, 0.33, 0.30, 1.0),
    "Pb": (0.34, 0.35, 0.38, 1.0), "Bi": (0.62, 0.31, 0.71, 1.0),
    "Po": (0.67, 0.36, 0.0, 1.0), "At": (0.46, 0.31, 0.27, 1.0),
    "Rn": (0.26, 0.51, 0.59, 1.0),
    "Fr": (0.26, 0.0, 0.40, 1.0), "Ra": (0.0, 0.49, 0.0, 1.0),
    "Ac": (0.44, 0.67, 0.98, 1.0), "Th": (0.0, 0.73, 1.0, 1.0),
    "Pa": (0.0, 0.63, 1.0, 1.0), "U": (0.0, 0.56, 1.0, 1.0),
    "Np": (0.0, 0.50, 1.0, 1.0), "Pu": (0.0, 0.42, 1.0, 1.0),
    "Am": (0.33, 0.36, 0.95, 1.0), "Cm": (0.47, 0.36, 0.89, 1.0),
    "Bk": (0.54, 0.31, 0.89, 1.0), "Cf": (0.63, 0.21, 0.83, 1.0),
    "Es": (0.70, 0.12, 0.83, 1.0), "Fm": (0.70, 0.12, 0.73, 1.0),
    "Md": (0.70, 0.05, 0.65, 1.0), "No": (0.74, 0.05, 0.53, 1.0),
    "Lr": (0.78, 0.0, 0.40, 1.0),
    "Rf": (0.80, 0.0, 0.35, 1.0), "Db": (0.82, 0.0, 0.31, 1.0),
    "Sg": (0.85, 0.0, 0.27, 1.0), "Bh": (0.88, 0.0, 0.22, 1.0),
    "Hs": (0.90, 0.0, 0.18, 1.0), "Mt": (0.92, 0.0, 0.15, 1.0),
    "Ds": (0.94, 0.0, 0.13, 1.0), "Rg": (0.96, 0.0, 0.10, 1.0),
    "Cn": (0.98, 0.0, 0.08, 1.0), "Nh": (1.0, 0.0, 0.06, 1.0),
    "Fl": (1.0, 0.0, 0.04, 1.0), "Mc": (1.0, 0.0, 0.02, 1.0),
    "Lv": (1.0, 0.0, 0.0, 1.0), "Ts": (1.0, 0.08, 0.58, 1.0),
    "Og": (1.0, 0.41, 0.71, 1.0)
}

def smiles_to_3d_data(smiles: str):
    # Generated with ChatGPT 5.0

    """
    Convert SMILES to 3D structured data with element, position, and radius.

    Parameters
    ----------
    smiles : str
        Input SMILES string
    use_vdw : bool
        If True, use van der Waals radii instead of covalent ones
    """
    mol = Chem.MolFromSmiles(smiles)
    if mol is None:
        raise ValueError(f"Invalid SMILES: {smiles}")

    mol = Chem.AddHs(mol)
    params = AllChem.ETKDGv3()
    params.randomSeed = 0xf00d
    if AllChem.EmbedMolecule(mol, params) != 0:
        raise RuntimeError("3D embedding failed")
    AllChem.UFFOptimizeMolecule(mol)

    conf = mol.GetConformer()

    atoms = []
    for atom in mol.GetAtoms():
        pos = conf.GetAtomPosition(atom.GetIdx())
        elem = atom.GetSymbol()
        radius = COVALENT_RADII.get(elem, 1.0)  # fallback radius
        color = CPK_COLORS.get(elem, (0, 0, 0, 1)) # fallback color
        atoms.append({
            "element": elem,
            "x": pos.x,
            "y": pos.y,
            "z": pos.z,
            "radius": radius
        })

    bonds = []
    for bond in mol.GetBonds():
        bonds.append({
            "start": bond.GetBeginAtomIdx(),
            "end": bond.GetEndAtomIdx(),
            "order": bond.GetBondTypeAsDouble()
        })

    return {"atoms": atoms, "bonds": bonds}

# Code generated by ChatGPT 5

from math import sin, cos, pi
from panda3d.core import (
    GeomVertexFormat, GeomVertexData, Geom, GeomTriangles, GeomNode,
    GeomVertexWriter, Vec3, Vec4, NodePath, TransparencyAttrib
)
from direct.showbase.ShowBase import ShowBase


def create_sphere(render, radius=1.0, color=(1, 0, 0, 1), slices=32, stacks=16):
    """
    Procedurally create a colored sphere.

    Args:
        render (NodePath): The parent node (usually base.render).
        radius (float): Radius of the sphere.
        color (tuple): RGBA color, each value between 0â€“1.
        slices (int): Number of horizontal divisions.
        stacks (int): Number of vertical divisions.

    Returns:
        NodePath: The sphere node.
    """
    format = GeomVertexFormat.get_v3n3c4()
    vdata = GeomVertexData('sphere', format, Geom.UH_static)

    vertex = GeomVertexWriter(vdata, 'vertex')
    normal = GeomVertexWriter(vdata, 'normal')
    color_writer = GeomVertexWriter(vdata, 'color')

    # Generate vertices
    for i in range(stacks + 1):
        phi = pi * i / stacks
        for j in range(slices + 1):
            theta = 2 * pi * j / slices
            x = radius * sin(phi) * cos(theta)
            y = radius * sin(phi) * sin(theta)
            z = radius * cos(phi)
            vertex.add_data3(x, y, z)
            normal.add_data3(Vec3(x, y, z).normalized())
            color_writer.add_data4f(*color)

    # Generate triangles
    tris = GeomTriangles(Geom.UH_static)
    for i in range(stacks):
        for j in range(slices):
            i1 = i * (slices + 1) + j
            i2 = i1 + slices + 1
            tris.add_vertices(i1, i2, i1 + 1)
            tris.add_vertices(i1 + 1, i2, i2 + 1)

    geom = Geom(vdata)
    geom.add_primitive(tris)
    node = GeomNode('sphere')
    node.add_geom(geom)

    sphere_np = render.attach_new_node(node)
    sphere_np.set_two_sided(True)

    # Enable transparency if alpha < 1.0
    if color[3] < 1.0:
        sphere_np.set_transparency(TransparencyAttrib.M_alpha)
        sphere_np.set_depth_write(False)  # Helps avoid z-sorting artifacts

    return sphere_np

def update_sphere_color(sphere, color):
    sphere.set_color(color)

    # Enable transparency if alpha < 1.0
    if color[3] < 1.0:
        sphere.set_transparency(TransparencyAttrib.M_alpha)
        sphere.set_depth_write(False)  # Helps avoid z-sorting artifacts
    
    return sphere

# Example usage:
class App(ShowBase):
    def __init__(self):
        super().__init__()
        self.disable_mouse()
        self.camera.set_pos(0, -5, 0)
        self.camera.look_at(0, 0, 0)

        # Create a green procedural sphere
        sphere = create_sphere(self.render, radius=1.0, color=(0, 1, 0, 1))
        sphere.set_pos(0, 0, 0)
        sphere = update_sphere_color(sphere, (1, 0, 0, 0.1))

if __name__ == "__main__":
    app = App()
    app.run()

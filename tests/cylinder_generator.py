# Code generated by ChatGPT 5

from math import sin, cos, pi
from panda3d.core import (
    GeomVertexFormat, GeomVertexData, Geom, GeomTriangles, GeomNode,
    GeomVertexWriter, Vec3, TransparencyAttrib
)
from direct.showbase.ShowBase import ShowBase


def create_cylinder(render, radius=1.0, height=2.0, color=(1, 0, 0, 1), slices=32):
    """
    Procedurally create a colored cylinder and attach it to the scene graph.

    Args:
        render (NodePath): The parent node (usually base.render).
        radius (float): Radius of the cylinder base.
        height (float): Height of the cylinder.
        color (tuple): RGBA color, each value between 0â€“1.
        slices (int): Number of radial divisions (smoothness).

    Returns:
        NodePath: The cylinder NodePath.
    """
    format = GeomVertexFormat.get_v3n3c4()
    vdata = GeomVertexData('cylinder', format, Geom.UH_static)

    vertex = GeomVertexWriter(vdata, 'vertex')
    normal = GeomVertexWriter(vdata, 'normal')
    color_writer = GeomVertexWriter(vdata, 'color')

    # Top and bottom z-coordinates
    half_h = height / 2.0

    # --- Generate side vertices ---
    for i in range(slices + 1):
        theta = 2 * pi * i / slices
        x = radius * cos(theta)
        y = radius * sin(theta)
        nx = cos(theta)
        ny = sin(theta)

        # Bottom vertex
        vertex.add_data3(x, y, -half_h)
        normal.add_data3(nx, ny, 0)
        color_writer.add_data4f(*color)

        # Top vertex
        vertex.add_data3(x, y, half_h)
        normal.add_data3(nx, ny, 0)
        color_writer.add_data4f(*color)

    tris = GeomTriangles(Geom.UH_static)

    # --- Create side triangles ---
    for i in range(slices):
        i1 = i * 2
        i2 = i1 + 1
        i3 = (i1 + 2) % ((slices + 1) * 2)
        i4 = (i1 + 3) % ((slices + 1) * 2)
        tris.add_vertices(i1, i3, i2)
        tris.add_vertices(i2, i3, i4)

    # --- Generate top and bottom caps ---
    start_index = (slices + 1) * 2
    for z, nz in [(half_h, 1), (-half_h, -1)]:
        center_index = vdata.get_num_rows()
        vertex.add_data3(0, 0, z)
        normal.add_data3(0, 0, nz)
        color_writer.add_data4f(*color)

        base_index = 0 if nz < 0 else 1
        for i in range(slices):
            i1 = i * 2 + base_index
            i2 = ((i + 1) % slices) * 2 + base_index
            if nz > 0:
                tris.add_vertices(center_index, i1, i2)
            else:
                tris.add_vertices(center_index, i2, i1)

    # --- Finalize geometry ---
    geom = Geom(vdata)
    geom.add_primitive(tris)
    node = GeomNode('cylinder')
    node.add_geom(geom)

    cylinder_np = render.attach_new_node(node)
    cylinder_np.set_two_sided(True)

    # Enable transparency if alpha < 1.0
    if color[3] < 1.0:
        cylinder_np.set_transparency(TransparencyAttrib.M_alpha)
        cylinder_np.set_depth_write(False)

    return cylinder_np

def update_cylinder_color(cylinder, color):
    cylinder.set_color(color)

    # Enable transparency if alpha < 1.0
    if color[3] < 1.0:
        cylinder.set_transparency(TransparencyAttrib.M_alpha)
        cylinder.set_depth_write(False)
    
    return cylinder

# --- Example usage ---
class App(ShowBase):
    def __init__(self):
        super().__init__()
        self.disable_mouse()
        self.camera.set_pos(0, -6, 1.5)
        self.camera.look_at(0, 0, 0)

        # Create a semi-transparent blue cylinder
        cylinder = create_cylinder(
            self.render,
            radius=1.0,
            height=2.0,
            color=(0.2, 0.4, 1.0, 0.6),
            slices=48
        )
        cylinder.set_pos(0, 0, 0)
        cylinder = update_cylinder_color(cylinder, (0.2, 0.4, 1.0, 0.1))


if __name__ == "__main__":
    app = App()
    app.run()
